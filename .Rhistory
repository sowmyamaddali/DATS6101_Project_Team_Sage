df<-table(stroke_df$stroke)
stroke_df = read.csv("healthcare-dataset-stroke-data.csv")
stroke_df = subset(stroke_df, select = -c(id))
head(stroke_df)
# Getting the summary of the dataframe
summary(stroke_df)
# Looking at the structure of the Dataframe
str(stroke_df)
# changing the variables to categorical variables and numerical variables
stroke_df$gender <- as.factor(stroke_df$gender)
stroke_df$hypertension <- as.factor(stroke_df$hypertension)
stroke_df$heart_disease <- as.factor(stroke_df$heart_disease)
stroke_df$ever_married <- as.factor(stroke_df$ever_married)
stroke_df$bmi <- as.numeric(stroke_df$bmi)
stroke_df$stroke<- as.factor(stroke_df$stroke)
str(stroke_df)
# Finding if there are any NA's in the dataset
paste("The NA's in the dataset is:",sum(is.na(stroke_df)))
summary(stroke_df)
# There are 201 NA's in BMI. Replacing those variables with mean of BMI
stroke_df$bmi[is.na(stroke_df$bmi)] <- mean(stroke_df$bmi,na.rm = TRUE)
# Finding if there are any NA's after imputation of null values
paste("The NA's in the dataset is:",sum(is.na(stroke_df)))
df<-table(stroke_df$stroke)
barplot(df,main='Distribution of Target Variable (Stroke)',col=c('orange','red'))
dat=table(stroke_df$stroke,stroke_df$smoking_status)
barplot(dat,
main = "People segregated based on their smoking habbits",
xlab = "Smoking status",
ylab = "Number of people",
col = c("Green","red"),
beside = TRUE
)
resi=table(stroke_df$stroke,stroke_df$Residence_type)
barplot(resi,
main = "Distribution of Resident People affected by Brain Stroke",
xlab = "Residence_type",
ylab = "Number of people",
col = c("Red","Orange"),
beside = TRUE
)
#Pie Plot for Rural VS URBAN
library(plotrix)
#Pie Plot for Rural VS URBAN
help(plotrix)
library(plotrix)
#Pie Plot for Rural VS URBAN
install.packages("plotrix")
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-paste(names(stroke_df, "\n", mytable, sep=""))
#Pie Plot for Rural VS URBAN
install.packages("plotrix")
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-paste(names(stroke_df), "\n", mytable, sep="")
install.packages("plotrix")
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-paste(names(stroke_df), "\n", mytable, sep="")
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-paste(names(stroke_df), "\n", df2, sep="")
pie3D(df2,labels=lab,explode=0.1,
main="Pie Chart of Residence_type ")
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-paste(names(stroke_df), "\n", df2, sep="")
pie(df2,labels=lab,explode=0.1,
main="Pie Chart of Residence_type ")
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
pie(df2,explode=0.2,
main="Pie Chart of Residence_type ")
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
pie(df2,explode=0.3,
main="Pie Chart of Residence_type ")
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
pie3D(df2,explode=0.3,
main="Pie Chart of Residence_type ")
# Compare residence type with stroke
tab1 = table(stroke_df$residence_type, stroke_df$stroke)
# Compare residence type with stroke
tab1 = table(stroke_df$Residence_type, stroke_df$stroke)
names(dimnames(table7))<- c("Work Type", "Stroke")
# Compare residence type with stroke
tab1 = table(stroke_df$Residence_type, stroke_df$stroke)
names(dimnames(table7))<- c("Work Type", "Stroke")
# Compare residence type with stroke
tab1 = table(stroke_df$Residence_type, stroke_df$stroke)
names(dimnames(tab1))<- c("Work Type", "Stroke")
tab1
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
pie3D(df2,explode=0.3,main="Pie Chart of Residence_type ",labels = 'Rural')
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
pie3D(df2,explode=0.3,main="Pie Chart of Residence_type ",labels = 'Rural','Urban')
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-c('Rural','Urban')
pie3D(df2,explode=0.3,main="Pie Chart of Residence_type ",labels = lab)
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-c('Rural','Urban')
pie3D(df2,explode=0.8,main="Pie Chart of Residence_type ",labels = lab)
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-c('Rural','Urban')
pie3D(df2,explode=1.0,main="Pie Chart of Residence_type ",labels = lab)
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-c('Rural','Urban')
pie3D(df2,explode=1.5,main="Pie Chart of Residence_type ",labels = lab)
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-c('Rural','Urban')
pie3D(df2,explode=1.0,main="Pie Chart of Residence_type ",labels = lab)
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-c('Rural','Urban')
pie3D(df2,explode=0.9,main="Pie Chart of Residence_type ",labels = lab)
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-c('Rural','Urban')
pie3D(df2,main="Pie Chart of Residence_type ",labels = lab)
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-c('Rural','Urban')
pie3D(df2,explode=0.4,main="Pie Chart of Residence_type ",labels = lab)
#Pie Plot for Rural VS URBAN
library(plotrix)
df2<-table(stroke_df$Residence_type)
lab<-c('Rural','Urban')
pie3D(df2,explode=0.2,main="Pie Chart of Residence_type ",labels = lab)
set.seed(123)
ind <- sample(2, nrow(stroke_df), replace = TRUE, prob = c(0.7, 0.3))
train <- data[ind==1,]
set.seed(123)
ind <- sample(2, nrow(stroke_df), replace = TRUE, prob = c(0.7, 0.3))
train <- stroke_df[ind==1,]
test <- stroke_df[ind==2,]
table(train$stroke)
set.seed(123)
ind <- sample(2, nrow(stroke_df), replace = TRUE, prob = c(0.6, 0.4))
train <- stroke_df[ind==1,]
test <- stroke_df[ind==2,]
table(train$stroke)
set.seed(123)
ind <- sample(2, nrow(stroke_df), replace = TRUE, prob = c(0.5, 0.5))
train <- stroke_df[ind==1,]
test <- stroke_df[ind==2,]
table(train$stroke)
set.seed(123)
ind <- sample(2, nrow(stroke_df), replace = TRUE, prob = c(0.3, 0.5))
train <- stroke_df[ind==1,]
test <- stroke_df[ind==2,]
table(train$stroke)
set.seed(123)
ind <- sample(2, nrow(stroke_df), replace = TRUE, prob = c(0.2, 0.9))
train <- stroke_df[ind==1,]
test <- stroke_df[ind==2,]
table(train$stroke)
set.seed(123)
ind <- sample(2, nrow(stroke_df), replace = TRUE, prob = c(0.1, 0.9))
train <- stroke_df[ind==1,]
test <- stroke_df[ind==2,]
table(train$stroke)
set.seed(123)
ind <- sample(2, nrow(stroke_df), replace = TRUE, prob = c(0.6, 0.4))
train <- stroke_df[ind==1,]
test <- stroke_df[ind==2,]
table(train$stroke)
stroke_df = read.csv("healthcare-dataset-stroke-data.csv")
stroke_df = subset(stroke_df, select = -c(id))
head(stroke_df)
# Getting the summary of the dataframe
summary(stroke_df)
# Looking at the structure of the Dataframe
str(stroke_df)
install.packages(CatEncoders)
library(CatEncoders)
stroke_df$Residence_type <- as.numeric(factor(stroke_df$Residence_type))
head(stroke_df)
ch<-table(stroke_df$Residence_type, stroke_df$stroke)
chisq.test(stroke_df$Residence_type, stroke_df$stroke)
stroke_df$work_type <- as.numeric(factor(stroke_df$work_type))
head(stroke_df)
# Checking Test of Independence between Residence_type and Target Variable Stroke
#alpha =0.05
ch<-table(stroke_df$Residence_type, stroke_df$stroke)
chisq.test(stroke_df$Residence_type, stroke_df$stroke)
ch2<-table(stroke_df$work_type, stroke_df$stroke)
chisq.test(stroke_df$work_type, stroke_df$stroke)
# Checking Test of Independence between Residence_type and Target Variable Stroke
#alpha =0.05
ch<-table(stroke_df$Residence_type, stroke_df$stroke)
chisq.test(stroke_df$Residence_type, stroke_df$stroke)
ch2<-table(stroke_df$work_type, stroke_df$stroke)
chisq.test(stroke_df$work_type, stroke_df$stroke)
format.pval(pv =5.398e-10,
# digits : number of digits, but after the 0.0
digits = 2,
# eps = the threshold value above wich the
# function will replace the pvalue by "<0.0xxx"
eps = 0.001,
# nsmall = how much tails 0 to keep if digits of
# original value < to digits defined
nsmall = 3
)
set.seed(123)
ind <- sample(2, nrow(stroke_df), replace = TRUE, prob = c(0.7, 0.3))
train <- stroke_df[ind==1,]
test <- stroke_df[ind==2,]
table(stroke_df$stroke)
set.seed(123)
ind <- sample(2, nrow(stroke_df), replace = TRUE, prob = c(0.6, 0.4))
train <- stroke_df[ind==1,]
test <- stroke_df[ind==2,]
table(stroke_df$stroke)
both <- ovun.sample(stroket~., data=train, method = "both",
p = 0.5,
seed = 222,
N = 285)$data
library(ROSE)
install.packages(ROSE)
install.packages("ROSE")
library(ROSE)
both <- ovun.sample(stroket~., data=train, method = "both",
p = 0.5,
seed = 222,
N = 285)$data
library(ROSE)
both <- ovun.sample(stroke~., data=train, method = "both",
p = 0.5,
seed = 222,
N = 285)$data
table(both$admit)
library(ROSE)
both <- ovun.sample(stroke~., data=train, method = "both",
p = 0.5,
seed = 222,
N = 285)$data
table(both$stroke)
barplot(both$stroke)
library(ROSE)
both <- ovun.sample(stroke~., data=train, method = "both",
p = 0.5,
seed = 222,
N = 285)$data
r<-table(both$stroke)
barplot(r)
# UNDER AND OVER SAMPLING TECHNIQUE
barplot(r,col='gold')
# UNDER AND OVER SAMPLING - BOTH
library(ROSE)
both <- ovun.sample(stroke~., data=train, method = "both",
p = 0.5,
seed = 222,
N = 285)$data
r<-table(both$stroke)
r
# UNDER AND OVER SAMPLING - BOTH
library(ROSE)
both <- ovun.sample(stroke~., data=train, method = "both",
p = 0.5,
seed = 222,
N = 285)$data
r<-table(both$stroke)
r
# UNDER AND OVER SAMPLING TECHNIQUE
barplot(r,col='gold')
#UNDER
un <- ovun.sample(stroke~., data=train, method = "under",
N = 194)$data
u<-table(un$stroke)
u
ov <- ovun.sample(stroke~., data=train, method = "over",
N = 376)$data
ov <- ovun.sample(stroke~., data=train, method = "over"
)$data
o<-table(ov$stroke)
o
ov <- ovun.sample(stroke~., data=train, method = "over"
)$data
o<-table(ov$stroke)
o
barplot(o)
#UNDER
un <- ovun.sample(stroke~., data=train, method = "under",
N = 194)$data
u<-table(un$stroke)
u
barplot(u)
#UNDER
un <- ovun.sample(stroke~., data=train, method = "under")$data
u<-table(un$stroke)
u
barplot(u)
#UNDER
un <- ovun.sample(stroke~., data=train, method = "under")$data
u<-table(un$stroke)
u
barplot(u,col='orange')
#Over sampling
ov <- ovun.sample(stroke~., data=train, method = "over"
)$data
o<-table(ov$stroke)
o
barplot(o,col='red')
